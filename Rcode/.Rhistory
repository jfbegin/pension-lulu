plot(BondsMonthly[, 2], type = "l", xaxt = 'n', col = "green", main = "Bond Yields", ylab = "Monthly Rate", lwd = 1.5, xlab = "Date")
axis(side = 1, at = seq(1, 306, by = 60), labels = CDNbonds$Date[seq(1, 306, by = 60)])
legend(x = 95, y = 0.0076,legend = c("3-month", "1-year", "2-year", "5-year", "10-year", "15-year"), col = c("red", "green", "purple", "orange", "black"), lty = 1, lwd = 1, horiz = T, cex =0.6)
ylim = -0.001:0.009
lines(BondsMonthly[, 3], type = "l", lwd = 1, col = "red")
lines(BondsMonthly[, 4], type = "l", lwd = 1, col = "purple")
lines(BondsMonthly[, 6], type = "l", lwd = 1, col = "orange")
lines(BondsMonthly[, 8], type = "l", lwd = 1, col = "black")
lines(BondsMonthly[, 9], type = "l", lwd = 1, col = "blue")
#inflation
CDNinflation <- read.table("canada cpi.csv", header=TRUE, sep=",", na.strings=" ")
CDNinfrate<-CDNinflation$continuous
plot(CDNinfrate, type="l", main = "Inflation Rate", xaxt='n', xlab="Date", ylab="Monthly Rate")
axis(side=1, at=seq(1, 306, by=60),labels=CDNbonds$Date[seq(1, 306, by=60)])
#Canadian stock TSX
TSXindex <- read.table("TSX with dividen.csv", header=TRUE, sep=",", na.strings=" ")
CDNstock <- TSXindex$conti
#CDNstock <- TSXindex$conti + CDNdividend
plot(12*CDNstock, type="l", main = "TSX stock return", xaxt='n', xlab="time",ylab="continuously compounded annual rate")
axis(side=1, at=seq(1, 306, by=60),labels=CDNbonds$Date[seq(1, 306, by=60)])
ExCDNstock <- CDNstock - BondsMonthly[,2]
plot(ExCDNstock, type="l", main = "Excess Stock Return", xaxt='n', xlab="Date",ylab="Monthly Rate")
axis(side=1, at=seq(1, 306, by=60),labels=CDNbonds$Date[seq(1, 306, by=60)])
#Canadian stock dividend yield
CDNdividend <-TSXindex$DividenMonth
plot(CDNdividend, type="l", main = "Dividend Yield", xaxt='n', xlab="Date",ylab="Monthly Rate")
axis(side = 1, at = seq(1, 306, by = 60), labels = CDNbonds$Date[seq(1, 306, by = 60)])
#make z4 as stock return + dividend yield - bondsMonthly
ExCDNstock <- ExCDNstock + CDNdividend
VARinput <- data.frame(tbill = BondsMonthly[, 2], bonds15 = BondsMonthly[, 9], infrate = CDNinfrate, TSXexcess = ExCDNstock)
MeanData <- apply(X = VARinput, MARGIN = 2, FUN = mean)
StdData <- apply(X = VARinput, MARGIN = 2, FUN = sd)
##Combine the input of VAR data into one data frame
VARinput <- data.frame(tbill = BondsMonthly[,2], bonds15 = BondsMonthly[,9], infrate = CDNinfrate, TSXexcess = ExCDNstock)
MeanData <- apply(X=VARinput, MARGIN=2, FUN=mean)
StdData  <- apply(X=VARinput, MARGIN=2, FUN=sd)
##Center the data at mean=0
ZeroMeanData <- VARinput
ZeroMeanData$tbill <- VARinput$tbill-MeanData[1]
ZeroMeanData$bonds15 <- VARinput$bonds15-MeanData[2]
ZeroMeanData$infrate <- VARinput$infrate-MeanData[3]
ZeroMeanData$TSXexcess <- VARinput$TSXexcess - MeanData[4]
##Estimate the VAR(1) model
VAR1model <- VAR(ZeroMeanData,p = 1, type="none")
VAR1result<- summary(VAR1model)
#Library
library(vars)
library(ucminf)
library(rgenoud)
library(matlib)
##library(MTS)
##Estimate the VAR(1) model
VAR1model <- VAR(ZeroMeanData,p = 1, type="none")
VAR1result<- summary(VAR1model)
B=Bcoef(VAR1model)
Nu=(diag(4)-B)%*%MeanData
Sigma = VAR1result$covres
B
Mu
Nu
Sigma
CDSigma = chol(Sigma)
abseigen=abs(eigen(B)$value)
abseigen
c
c(1:9)
View(BondsMonthly)
View(BondsMonthly)
CDNbonds_full <- read.table("bond yield monthly full.csv", header=TRUE, sep=",", na.strings=" ")
View(CDNbonds_full)
View(CDNbonds_full)
View(CDNbonds_full)
View(CDNbonds_full)
CDNbonds_full=CDNbonds_full[,2:9]
View(CDNbonds_full)
View(CDNbonds_full)
View(BondsMonthly)
View(BondsMonthly)
View(CDNbonds_full)
View(CDNbonds_full)
CDNbonds_full=CDNbonds_full/12
View(CDNbonds_full)
View(CDNbonds_full)
rankedCDNbonds=CDNbonds_full[,c(1:8)]
histdata=as.matrix(rankedCDNbonds)
VARaffine = as.matrix(VARinput)
Nhist=nrow(histdata)
Nhist
delta0=0
delta1=c(1,0,0,0)
181/12
histdata
#Estimating the parameter by minimize the value of sum of squares
Optimizefunc = function(sl){
sl1matrix=matrix(data = c(sl[1:4],sl[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
sl0vector=c(sl[9],sl[10],0,Nu[4])
AnVector=numeric(181)
BnMatrix=matrix(data=0,nrow=4,ncol=181)
for(i in 2:181){
BnMatrix[,i] = -delta1+t(B-sl1matrix)%*%BnMatrix[,i-1]
AnVector[i]  = -delta0+AnVector[i-1]+t(BnMatrix[,i-1])%*%(Nu-sl0vector)+0.5*t(BnMatrix[,i-1])%*%t(CDSigma)%*%CDSigma%*%BnMatrix[,i-1]
}
yfit=matrix(data=0,nrow=Nhist,ncol=7)
for (i in 1:Nhist){
yfit[i, 1] = -1 / 12 * (AnVector[13] - sum(BnMatrix[, 13] * (VARaffine[i,])))
yfit[i, 2] = -1 / 36 * (AnVector[37] + sum(BnMatrix[, 37] * (VARaffine[i,])))
yfit[i, 3] = -1 / 60 * (AnVector[61] + sum(BnMatrix[, 61] * (VARaffine[i,])))
yfit[i, 4] = -1 / 84 * (AnVector[85] + sum(BnMatrix[, 85] * (VARaffine[i,])))
yfit[i, 5] = -1 / 120 * (AnVector[121] + sum(BnMatrix[, 121] * (VARaffine[i,])))
yfit[i, 6] = -1 / 144 * (AnVector[145] + sum(BnMatrix[, 145] * (VARaffine[i,])))
yfit[i, 7] = -1 / 168 * (AnVector[169] + sum(BnMatrix[, 169] * (VARaffine[i,])))
yfit[i, 8] = -1 / 180 * (AnVector[181] + sum(BnMatrix[, 181] * (VARaffine[i,])))
}
sumsquared = sum((yfit-histdata)^2)
return(sumsquared)
}
Optimizefunc([0,0,0,0,0,0,0,0,0,0])
Optimizefunc(c(0,0,0,0,0,0,0,0,0,0))
BnMatrix
B
sl1matrix=matrix(data = c(sl[1:4],sl[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
sl = c(0,0,0,0,0,0,0,0,0,0)
sl1matrix=matrix(data = c(sl[1:4],sl[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
sl0vector=c(sl[9],sl[10],0,Nu[4])
AnVector=numeric(181)
BnMatrix=matrix(data=0,nrow=4,ncol=181)
for(i in 2:181){
BnMatrix[,i] = -delta1+t(B-sl1matrix)%*%BnMatrix[,i-1]
AnVector[i]  = -delta0+AnVector[i-1]+t(BnMatrix[,i-1])%*%(Nu-sl0vector)+0.5*t(BnMatrix[,i-1])%*%t(CDSigma)%*%CDSigma%*%BnMatrix[,i-1]
}
BnMatrix
yfit=matrix(data=0,nrow=Nhist,ncol=7)
for (i in 1:Nhist){
yfit[i, 1] = -1 / 12 * (AnVector[13] - sum(BnMatrix[, 13] * (VARaffine[i,])))
yfit[i, 2] = -1 / 36 * (AnVector[37] + sum(BnMatrix[, 37] * (VARaffine[i,])))
yfit[i, 3] = -1 / 60 * (AnVector[61] + sum(BnMatrix[, 61] * (VARaffine[i,])))
yfit[i, 4] = -1 / 84 * (AnVector[85] + sum(BnMatrix[, 85] * (VARaffine[i,])))
yfit[i, 5] = -1 / 120 * (AnVector[121] + sum(BnMatrix[, 121] * (VARaffine[i,])))
yfit[i, 6] = -1 / 144 * (AnVector[145] + sum(BnMatrix[, 145] * (VARaffine[i,])))
yfit[i, 7] = -1 / 168 * (AnVector[169] + sum(BnMatrix[, 169] * (VARaffine[i,])))
yfit[i, 8] = -1 / 180 * (AnVector[181] + sum(BnMatrix[, 181] * (VARaffine[i,])))
}
yfit=matrix(data=0,nrow=Nhist,ncol=8)
for (i in 1:Nhist){
yfit[i, 1] = -1 / 12 * (AnVector[13] - sum(BnMatrix[, 13] * (VARaffine[i,])))
yfit[i, 2] = -1 / 36 * (AnVector[37] + sum(BnMatrix[, 37] * (VARaffine[i,])))
yfit[i, 3] = -1 / 60 * (AnVector[61] + sum(BnMatrix[, 61] * (VARaffine[i,])))
yfit[i, 4] = -1 / 84 * (AnVector[85] + sum(BnMatrix[, 85] * (VARaffine[i,])))
yfit[i, 5] = -1 / 120 * (AnVector[121] + sum(BnMatrix[, 121] * (VARaffine[i,])))
yfit[i, 6] = -1 / 144 * (AnVector[145] + sum(BnMatrix[, 145] * (VARaffine[i,])))
yfit[i, 7] = -1 / 168 * (AnVector[169] + sum(BnMatrix[, 169] * (VARaffine[i,])))
yfit[i, 8] = -1 / 180 * (AnVector[181] + sum(BnMatrix[, 181] * (VARaffine[i,])))
}
sumsquared = sum((yfit-histdata)^2)
sumsquared
#Estimating the parameter by minimize the value of sum of squares
Optimizefunc = function(sl){
sl1matrix=matrix(data = c(sl[1:4],sl[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
sl0vector=c(sl[9],sl[10],0,Nu[4])
AnVector=numeric(181)
BnMatrix=matrix(data=0,nrow=4,ncol=181)
for(i in 2:181){
BnMatrix[,i] = -delta1+t(B-sl1matrix)%*%BnMatrix[,i-1]
AnVector[i]  = -delta0+AnVector[i-1]+t(BnMatrix[,i-1])%*%(Nu-sl0vector)+0.5*t(BnMatrix[,i-1])%*%t(CDSigma)%*%CDSigma%*%BnMatrix[,i-1]
}
yfit=matrix(data=0,nrow=Nhist,ncol=8)
for (i in 1:Nhist){
yfit[i, 1] = -1 / 12 * (AnVector[13] - sum(BnMatrix[, 13] * (VARaffine[i,])))
yfit[i, 2] = -1 / 36 * (AnVector[37] + sum(BnMatrix[, 37] * (VARaffine[i,])))
yfit[i, 3] = -1 / 60 * (AnVector[61] + sum(BnMatrix[, 61] * (VARaffine[i,])))
yfit[i, 4] = -1 / 84 * (AnVector[85] + sum(BnMatrix[, 85] * (VARaffine[i,])))
yfit[i, 5] = -1 / 120 * (AnVector[121] + sum(BnMatrix[, 121] * (VARaffine[i,])))
yfit[i, 6] = -1 / 144 * (AnVector[145] + sum(BnMatrix[, 145] * (VARaffine[i,])))
yfit[i, 7] = -1 / 168 * (AnVector[169] + sum(BnMatrix[, 169] * (VARaffine[i,])))
yfit[i, 8] = -1 / 180 * (AnVector[181] + sum(BnMatrix[, 181] * (VARaffine[i,])))
}
sumsquared = sum((yfit-histdata)^2)
return(sumsquared)
}
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.0000,max=0.0000),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
}
}
slbest
minfunc
B
SIgma
Sigma
CDSigma
slbest
L1 = matrix(data=c(slbest[1:4],slbest[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
L1
L0 = c(slbest[9],slbest[10],0,Nu[4])
L0
slbest
CDSigma
solve(CDSigma)
solve(t(CDSigma))
solve(t(CDSigma))%*%L1
(t(CDSigma))%*%L1
slbest
library(vars)
library(ucminf)
library(rgenoud)
library(matlib)
setwd("D:/GitHub/jf_git/pension-lulu/Rcode")
CDNbonds <- read.table("bond yield partial.csv", header=TRUE, sep=",", na.strings=" ")
plot(CDNbonds$X2.year, type="l",xaxt='n', col="green", main="Bond Yields",ylab="annualized bond yields",lwd=1,xlab="time")
axis(side=1, at=seq(1, 306, by=60),labels=CDNbonds$Date[seq(1, 306, by=60)])
legend(x=10,y=0.09,legend=c("3 month","1 year", "2 year","5 year", "10 year", "15 year"), col=c("red", "green", "purple", "orange", "black"),lty=1,lwd=1, horiz = T)
lines(CDNbonds$X3.month, type="l",lwd=1,col="red")
lines(CDNbonds$X5.year, type="l",lwd=1,col="purple")
lines(CDNbonds$X10.year, type="l",lwd=1,col="orange")
lines(CDNbonds$X15.year, type = "l", lwd = 1, col = "black")
lines(CDNbonds$X1.year, type = "l", lwd = 1, col = "blue")
BondsMonthly = as.matrix(CDNbonds[c(2:10)])
BondsMonthly = BondsMonthly / 12
plot(BondsMonthly[, 2], type = "l", xaxt = 'n', col = "green", main = "Bond Yields", ylab = "Monthly Rate", lwd = 1.5, xlab = "Date")
axis(side = 1, at = seq(1, 306, by = 60), labels = CDNbonds$Date[seq(1, 306, by = 60)])
legend(x = 95, y = 0.0076,legend = c("3-month", "1-year", "2-year", "5-year", "10-year", "15-year"), col = c("red", "green", "purple", "orange", "black"), lty = 1, lwd = 1, horiz = T, cex =0.6)
ylim = -0.001:0.009
lines(BondsMonthly[, 3], type = "l", lwd = 1, col = "red")
lines(BondsMonthly[, 4], type = "l", lwd = 1, col = "purple")
lines(BondsMonthly[, 6], type = "l", lwd = 1, col = "orange")
lines(BondsMonthly[, 8], type = "l", lwd = 1, col = "black")
lines(BondsMonthly[, 9], type = "l", lwd = 1, col = "blue")
#inflation
CDNinflation <- read.table("canada cpi.csv", header=TRUE, sep=",", na.strings=" ")
CDNinfrate<-CDNinflation$continuous
plot(CDNinfrate, type="l", main = "Inflation Rate", xaxt='n', xlab="Date", ylab="Monthly Rate")
axis(side=1, at=seq(1, 306, by=60),labels=CDNbonds$Date[seq(1, 306, by=60)])
#Canadian stock TSX
TSXindex <- read.table("TSX with dividen.csv", header=TRUE, sep=",", na.strings=" ")
CDNstock <- TSXindex$conti
#CDNstock <- TSXindex$conti + CDNdividend
plot(12*CDNstock, type="l", main = "TSX stock return", xaxt='n', xlab="time",ylab="continuously compounded annual rate")
axis(side=1, at=seq(1, 306, by=60),labels=CDNbonds$Date[seq(1, 306, by=60)])
#Excess Stock Resturn
ExCDNstock <- CDNstock - BondsMonthly[,2]
plot(ExCDNstock, type="l", main = "Excess Stock Return", xaxt='n', xlab="Date",ylab="Monthly Rate")
axis(side=1, at=seq(1, 306, by=60),labels=CDNbonds$Date[seq(1, 306, by=60)])
#Canadian stock dividend yield
CDNdividend <-TSXindex$DividenMonth
plot(CDNdividend, type="l", main = "Dividend Yield", xaxt='n', xlab="Date",ylab="Monthly Rate")
axis(side = 1, at = seq(1, 306, by = 60), labels = CDNbonds$Date[seq(1, 306, by = 60)])
#make z4 as stock return + dividend yield - bondsMonthly
ExCDNstock <- ExCDNstock + CDNdividend
VARinput <- data.frame(tbill = BondsMonthly[, 2], bonds15 = BondsMonthly[, 9], infrate = CDNinfrate, TSXexcess = ExCDNstock)
MeanData <- apply(X = VARinput, MARGIN = 2, FUN = mean)
StdData <- apply(X = VARinput, MARGIN = 2, FUN = sd)
##Combine the input of VAR data into one data frame
VARinput <- data.frame(tbill = BondsMonthly[,2], bonds15 = BondsMonthly[,9], infrate = CDNinfrate, TSXexcess = ExCDNstock)
MeanData <- apply(X=VARinput, MARGIN=2, FUN=mean)
StdData  <- apply(X=VARinput, MARGIN=2, FUN=sd)
ZeroMeanData <- VARinput
ZeroMeanData$tbill <- VARinput$tbill-MeanData[1]
ZeroMeanData$bonds15 <- VARinput$bonds15-MeanData[2]
ZeroMeanData$infrate <- VARinput$infrate-MeanData[3]
ZeroMeanData$TSXexcess <- VARinput$TSXexcess - MeanData[4]
VAR1model <- VAR(ZeroMeanData,p = 1, type="none")
VAR1result<- summary(VAR1model)
B=Bcoef(VAR1model)
Nu=(diag(4)-B)%*%MeanData
Sigma = VAR1result$covres
CDSigma = chol(Sigma)
abseigen=abs(eigen(B)$value)
CDNbonds_full <- read.table("bond yield monthly full.csv", header=TRUE, sep=",", na.strings=" ")
rankedCDNbonds=CDNbonds_full[,c(1:8)]
histdata=as.matrix(rankedCDNbonds)
VARaffine = as.matrix(VARinput)
Nhist=nrow(histdata)
delta0=0
delta1=c(1,0,0,0)
#Estimating the parameter by minimize the value of sum of squares
Optimizefunc = function(sl){
sl1matrix=matrix(data = c(sl[1:4],sl[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
sl0vector=c(sl[9],sl[10],0,Nu[4])
AnVector=numeric(181)
BnMatrix=matrix(data=0,nrow=4,ncol=181)
for(i in 2:181){
BnMatrix[,i] = -delta1+t(B-sl1matrix)%*%BnMatrix[,i-1]
AnVector[i]  = -delta0+AnVector[i-1]+t(BnMatrix[,i-1])%*%(Nu-sl0vector)+0.5*t(BnMatrix[,i-1])%*%t(CDSigma)%*%CDSigma%*%BnMatrix[,i-1]
}
yfit=matrix(data=0,nrow=Nhist,ncol=8)
for (i in 1:Nhist){
yfit[i, 1] = -1 / 12 * (AnVector[13] - sum(BnMatrix[, 13] * (VARaffine[i,])))
yfit[i, 2] = -1 / 36 * (AnVector[37] + sum(BnMatrix[, 37] * (VARaffine[i,])))
yfit[i, 3] = -1 / 60 * (AnVector[61] + sum(BnMatrix[, 61] * (VARaffine[i,])))
yfit[i, 4] = -1 / 84 * (AnVector[85] + sum(BnMatrix[, 85] * (VARaffine[i,])))
yfit[i, 5] = -1 / 120 * (AnVector[121] + sum(BnMatrix[, 121] * (VARaffine[i,])))
yfit[i, 6] = -1 / 144 * (AnVector[145] + sum(BnMatrix[, 145] * (VARaffine[i,])))
yfit[i, 7] = -1 / 168 * (AnVector[169] + sum(BnMatrix[, 169] * (VARaffine[i,])))
yfit[i, 8] = -1 / 180 * (AnVector[181] + sum(BnMatrix[, 181] * (VARaffine[i,])))
}
sumsquared = sum((yfit-histdata)^2)
return(sumsquared)
}
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.0000,max=0.0000),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
B=vfunc
}
}
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.0000,max=0.0000),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
B=vfunc
}
}
sl= c(0,0,0,0,0,0,0,0,0,0)
sl1matrix=matrix(data = c(sl[1:4],sl[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
sl0vector=c(sl[9],sl[10],0,Nu[4])
sl1matrix
sl0vector
AnVector=numeric(181)
BnMatrix=matrix(data=0,nrow=4,ncol=181)
View(BnMatrix)
View(BnMatrix)
for(i in 2:181){
BnMatrix[,i] = -delta1+t(B-sl1matrix)%*%BnMatrix[,i-1]
AnVector[i]  = -delta0+AnVector[i-1]+t(BnMatrix[,i-1])%*%(Nu-sl0vector)+0.5*t(BnMatrix[,i-1])%*%t(CDSigma)%*%CDSigma%*%BnMatrix[,i-1]
}
View(BnMatrix)
View(BnMatrix)
yfit=matrix(data=0,nrow=Nhist,ncol=8)
for (i in 1:Nhist){
yfit[i, 1] = -1 / 12 * (AnVector[13] - sum(BnMatrix[, 13] * (VARaffine[i,])))
yfit[i, 2] = -1 / 36 * (AnVector[37] + sum(BnMatrix[, 37] * (VARaffine[i,])))
yfit[i, 3] = -1 / 60 * (AnVector[61] + sum(BnMatrix[, 61] * (VARaffine[i,])))
yfit[i, 4] = -1 / 84 * (AnVector[85] + sum(BnMatrix[, 85] * (VARaffine[i,])))
yfit[i, 5] = -1 / 120 * (AnVector[121] + sum(BnMatrix[, 121] * (VARaffine[i,])))
yfit[i, 6] = -1 / 144 * (AnVector[145] + sum(BnMatrix[, 145] * (VARaffine[i,])))
yfit[i, 7] = -1 / 168 * (AnVector[169] + sum(BnMatrix[, 169] * (VARaffine[i,])))
yfit[i, 8] = -1 / 180 * (AnVector[181] + sum(BnMatrix[, 181] * (VARaffine[i,])))
}
View(ZeroMeanData)
View(ZeroMeanData)
View(yfit)
View(yfit)
sumsquared = sum((yfit-histdata)^2)
View(yfit)
View(yfit)
View(histdata)
CDNbonds_full <- read.table("bond yield monthly full.csv", header=TRUE, sep=",", na.strings=" ")
CDNbonds_full = CDNbonds_full[,c(2:9)]
View(CDNbonds_full)
View(CDNbonds_full)
rankedCDNbonds=CDNbonds_full[,c(1:8)]
histdata=as.matrix(rankedCDNbonds)
VARaffine = as.matrix(VARinput)
Nhist=nrow(histdata)
delta0=0
delta1=c(1,0,0,0)
Optimizefunc = function(sl){
sl1matrix=matrix(data = c(sl[1:4],sl[5:8],0,0,0,0,B[4,]),4,4,byrow=TRUE)
sl0vector=c(sl[9],sl[10],0,Nu[4])
AnVector=numeric(181)
BnMatrix=matrix(data=0,nrow=4,ncol=181)
for(i in 2:181){
BnMatrix[,i] = -delta1+t(B-sl1matrix)%*%BnMatrix[,i-1]
AnVector[i]  = -delta0+AnVector[i-1]+t(BnMatrix[,i-1])%*%(Nu-sl0vector)+0.5*t(BnMatrix[,i-1])%*%t(CDSigma)%*%CDSigma%*%BnMatrix[,i-1]
}
yfit=matrix(data=0,nrow=Nhist,ncol=8)
for (i in 1:Nhist){
yfit[i, 1] = -1 / 12 * (AnVector[13] - sum(BnMatrix[, 13] * (VARaffine[i,])))
yfit[i, 2] = -1 / 36 * (AnVector[37] + sum(BnMatrix[, 37] * (VARaffine[i,])))
yfit[i, 3] = -1 / 60 * (AnVector[61] + sum(BnMatrix[, 61] * (VARaffine[i,])))
yfit[i, 4] = -1 / 84 * (AnVector[85] + sum(BnMatrix[, 85] * (VARaffine[i,])))
yfit[i, 5] = -1 / 120 * (AnVector[121] + sum(BnMatrix[, 121] * (VARaffine[i,])))
yfit[i, 6] = -1 / 144 * (AnVector[145] + sum(BnMatrix[, 145] * (VARaffine[i,])))
yfit[i, 7] = -1 / 168 * (AnVector[169] + sum(BnMatrix[, 169] * (VARaffine[i,])))
yfit[i, 8] = -1 / 180 * (AnVector[181] + sum(BnMatrix[, 181] * (VARaffine[i,])))
}
sumsquared = sum((yfit-histdata)^2)
return(sumsquared)
}
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.0000,max=0.0000),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
B=vfunc
}
}
slbest
B
vfunc
B=Bcoef(VAR1model)
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.1,max=0.0000),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
}
}
minfunc
sl
slbest
vfunc=Optimizefunc(sl)
vfunc
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.1,max=0.1),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(c(slbest, vfunc))
}
}
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.1,max=0.1),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(slbest)
}
}
vfunc
slbest=vector("double",10)
minfunc=100
for(i in 1:100){
sl<-ucminf(par=runif(10,min=-0.1,max=0.1),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(vfunc)
}
}
View(histdata)
View(histdata)
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=0,max=0),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(vfunc)
}
}
0.5132587/144
slbest=vector("double",10)
minfunc=100
for(i in 1:1){
sl<-ucminf(par=runif(10,min=-0.1,max=0.1),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(vfunc)
}
}
slbest=vector("double",10)
minfunc=100
for(i in 1:100){
sl<-ucminf(par=runif(10,min=-0.1,max=0.1),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(vfunc)
}
}
slbest=vector("double",10)
minfunc=100
for(i in 1:300){
sl<-ucminf(par=runif(10,min=-0.02,max=0.02),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(vfunc)
}
}
slbest
slsaved11 <- slbest
sl <- slbest
for(i in 1:1000){
sl<-ucminf(par=runif(10,min=-0.05,max=0.05),fn=Optimizefunc,control = list(xtol = 1e-30))$par
vfunc<-Optimizefunc(sl)
if(vfunc<minfunc){
slbest=sl
minfunc=vfunc
print(vfunc)
}
}
slbest
slbest
